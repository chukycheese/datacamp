return(TRUE)
}
# Call the function hello()
hello()
# The linkedin and facebook vectors have already been created for you
# Define the interpret function
interpret <- function(num_views) {
if (num_views > 15) {
print("You're popular!")
return (num_views)
} else {
print("Try to be more visible!")
return (0)
}
}
# Call the interpret function twice
interpret(linkedin[1])
interpret(facebook[2])
# The linkedin and facebook vectors have already been created for you
# Define the interpret function
interpret <- function(num_views) {
if (num_views > 15) {
print("You're popular!")
return (num_views)
} else {
print("Try to be more visible!")
return (0)
}
}
# Call the interpret function twice
interpret(linkedin[1])
interpret(facebook[3])
# The linkedin and facebook vectors have already been created for you
linkedin <- c(16, 9, 13, 5, 2, 17, 14)
facebook <- c(17, 7, 5, 16, 8, 13, 14)
# The interpret() can be used inside interpret_all()
interpret <- function(num_views) {
if (num_views > 15) {
print("You're popular!")
return(num_views)
} else {
print("Try to be more visible!")
return(0)
}
}
# Define the interpret_all() function
# views: vector with data to interpret
# return_sum: return total number of views on popular days?
interpret_all <- function(views, return_sum = TRUE) {
count <- 0
for (v in views) {
count <- count + interpret(v)
}
if (return_sum) {
return (count)
} else {
return(NULL)
}
}
# Call the interpret_all() function on both linkedin and facebook
interpret_all(linkedin)
interpret_all(facebook)
# Load the ggplot2 package
library(ggplot2)
# Retry the qplot() function
qplot(mtcars$wt, mtcars$hp)
# Check out the currently attached packages again
search()
# The vector pioneers has already been created for you
pioneers <- c("GAUSS:1777", "BAYES:1702", "PASCAL:1623", "PEARSON:1857")
# Split names from birth year
split_math <- strsplit(pioneers, split = ":")
# Convert to lowercase strings: split_low
split_low <- lapply(split_math, tolower)
# Take a look at the structure of split_low
str(split_low)
# Code from previous exercise:
pioneers <- c("GAUSS:1777", "BAYES:1702", "PASCAL:1623", "PEARSON:1857")
split <- strsplit(pioneers, split = ":")
split_low <- lapply(split, tolower)
# Write function select_first()
select_first <- function(x) {
x[1]
}
# Apply select_first() over split_low: names
names <- lapply(split_low, select_first)
# Write function select_second()
select_second <- function(x){
x[2]
}
# Apply select_second() over split_low: years
years <- lapply(split_low, select_second)
# Definition of split_low
pioneers <- c("GAUSS:1777", "BAYES:1702", "PASCAL:1623", "PEARSON:1857")
split <- strsplit(pioneers, split = ":")
split_low <- lapply(split, tolower)
# Transform: use anonymous function inside lapply
# select_first <- function(x) {
#   x[1]
# }
names <- lapply(split_low, function(x) {x[1]})
# Transform: use anonymous function inside lapply
# select_second <- function(x) {
#   x[2]
# }
years <- lapply(split_low, function(x) {x[2]})
# Definition of split_low
pioneers <- c("GAUSS:1777", "BAYES:1702", "PASCAL:1623", "PEARSON:1857")
split <- strsplit(pioneers, split = ":")
split_low <- lapply(split, tolower)
# Generic select function
select_el <- function(x, index) {
x[index]
}
# Use lapply() twice on split_low: names and years
names <- lapply(split_low, select_el, index = 1)
years <- lapply(split_low, select_el, index = 2)
temp <- list(c(3, 7, 9, 6, -1),
c(6, 9, 12, 13, 5),
c(4, 8, 3, -1, -3),
c(1, 4, 7, 2, -2),
c(5, 7, 9, 4, 2),
c(-3, 5, 8, 9, 4),
c(3, 6, 9, 4, 1))
# temp has already been defined in the workspace
# Use lapply() to find each day's minimum temperature
lapply(temp, min)
# Use sapply() to find each day's minimum temperature
sapply(temp, min)
# Use lapply() to find each day's maximum temperature
lapply(temp, max)
# Use sapply() to find each day's maximum temperature
sapply(temp, max)
temp <- list(c(3, 7, 9, 6, -1),
c(6, 9, 12, 13, 5),
c(4, 8, 3, -1, -3),
c(1, 4, 7, 2, -2),
c(5, 7, 9, 4, 2),
c(-3, 5, 8, 9, 4),
c(3, 6, 9, 4, 1))
# temp has already been defined in the workspace
# Use lapply() to find each day's minimum temperature
lapply(temp, min)
# Use sapply() to find each day's minimum temperature
sapply(temp, min)
# Use lapply() to find each day's maximum temperature
lapply(temp, max)
# Use sapply() to find each day's maximum temperature
sapply(temp, max)
# temp is already available in the workspace
# Create a function that returns min and max of a vector: extremes
extremes <- function(x) {
c(min = min(x), max = max(x))
}
# Apply extremes() over temp with sapply()
sapply(temp, extremes)
# Apply extremes() over temp with lapply()
lapply(temp, extremes)
# temp is already prepared for you in the workspace
# Definition of below_zero()
below_zero <- function(x) {
return(x[x < 0])
}
# Apply below_zero over temp using sapply(): freezing_s
freezing_s <- sapply(temp, below_zero)
# Apply below_zero over temp using lapply(): freezing_l
freezing_l <- lapply(temp, below_zero)
# Are freezing_s and freezing_l identical?
identical(freezing_s, freezing_l)
# temp is already available in the workspace
# Definition of print_info()
print_info <- function(x) {
cat("The average temperature is", mean(x), "\n")
}
# Apply print_info() over temp using sapply()
sapply(temp, print_info)
# Apply print_info() over temp using lapply()
lapply(temp, print_info)
# temp is already available in the workspace
# Definition of basics()
basics <- function(x) {
c(min = min(x), mean = mean(x), max = max(x))
}
# Apply basics() over temp using vapply()
vapply(temp, basics, FUN.VALUE = numeric(3))
# temp is already available in the workspace
# Definition of the basics() function
basics <- function(x) {
c(min = min(x), mean = mean(x), median = median(x), max = max(x))
}
# Fix the error:
# vapply(temp, basics, numeric(3))
vapply(temp, basics, numeric(4))
# temp is already defined in the workspace
# Convert to vapply() expression
# sapply(temp, max)
vapply(temp, max, FUN.VALUE = numeric(1))
# Convert to vapply() expression
# sapply(temp, function(x, y) { mean(x) > y }, y = 5)
vapply(temp, function(x, y) {mean(x) > y }, y = 5, FUN.VALUE = logical(1))
# The errors vector has already been defined for you
errors <- c(1.9, -2.6, 4.0, -9.5, -3.4, 7.3)
# Sum of absolute rounded values of errors
sum(abs(round(errors)))
# Don't edit these two lines
vec1 <- c(1.5, 2.5, 8.4, 3.7, 6.3)
vec2 <- rev(vec1)
# Fix the error
# mean(abs(vec1), abs(vec2))
mean(c(abs(vec1), abs(vec2)))
# The linkedin and facebook lists have already been created for you
linkedin <- list(16, 9, 13, 5, 2, 17, 14)
facebook <- list(17, 7, 5, 16, 8, 13, 14)
# Convert linkedin and facebook to a vector: li_vec and fb_vec
li_vec <- unlist(linkedin)
fb_vec <- unlist(facebook)
# Append fb_vec to li_vec: social_vec
social_vec <- append(li_vec, fb_vec)
# Sort social_vec
sort(social_vec, decreasing = TRUE)
# Fix me
# seq(rep(1, 7, by = 2), times = 7)
seq(rep(1, 7, times = 2), by = 7)
# Fix me
# seq(rep(1, 7, by = 2), times = 7)
rep(seq(1, 7, by = 2), times = 7)
# Create first sequence: seq1
seq1 <- seq(1, 500, by = 3)
# Create second sequence: seq2
seq2 <- seq(1200, 900, by = -7)
# Calculate total sum of the sequences
sum(seq1, seq2)
# The emails vector has already been defined for you
emails <- c("john.doe@ivyleague.edu", "education@world.gov", "dalai.lama@peace.org",
"invalid.edu", "quant@bigdatacollege.edu", "cookie.monster@sesame.tv")
# Use grepl() to match for "edu"
grepl("edu", emails)
# Use grep() to match for "edu", save result to hits
hits <- grep("edu", emails)
# Subset emails using hits
emails[hits]
# The emails vector has already been defined for you
emails <- c("john.doe@ivyleague.edu", "education@world.gov", "dalai.lama@peace.org",
"invalid.edu", "quant@bigdatacollege.edu", "cookie.monster@sesame.tv")
# Use grepl() to match for .edu addresses more robustly
grepl("@.*\\.edu$", emails)
# Use grep() to match for .edu addresses more robustly, save result to hits
hits <- grep("@.*\\.edu$", emails)
# Subset emails using hits
emails[hits]
# The emails vector has already been defined for you
emails <- c("john.doe@ivyleague.edu", "education@world.gov", "global@peace.org",
"invalid.edu", "quant@bigdatacollege.edu", "cookie.monster@sesame.tv")
# Use sub() to convert the email domains to datacamp.edu
sub("@.*\\.edu$", "@datacamp.edu", emails)
Sys.Date()
Sys.tie
Sys.time
Sys.time()
# Instructions
# In the editor on the right, three character strings representing dates have been created. Convert them to dates using as.Date(), and assign them to date1, date2, and date3 respectively. The code for date1 is already included.
# Extract useful information from the dates as character strings using format(). From the first date, select the weekday. From the second date, select the day of the month. From the third date, you should select the abbreviated month and the 4-digit year, separated by a space.
# Definition of character strings representing dates
str1 <- "May 23, '96"
str2 <- "2012-03-15"
str3 <- "30/January/2006"
# Convert the strings to dates: date1, date2, date3
date1 <- as.Date(str1, format = "%b %d, '%y")
date2 <- as.Date(str2, format = "%Y-%m-%d")
date3 <- as.Date(str3, format = "%d/%B/%Y")
# Convert dates to formatted strings
format(date1, "%A")
format(date2, "%d")
format(date3, "%b %Y")
# Definition of character strings representing times
str1 <- "May 23, '96 hours:23 minutes:01 seconds:45"
str2 <- "2012-3-12 14:23:08"
# Convert the strings to POSIXct objects: time1, time2
time1 <- as.POSIXct(str1, format = "%B %d, '%y hours:%H minutes:%M seconds:%S")
time2 <- as.POSIXct(str2, format = "%Y-%m-%d %H:%M:%S")
# Convert times to formatted strings
format(time1, "%M")
format(time2, "%I:%M %p")
day1 <- as.Date("2017-12-29")
day2 <- as.Date("2017-12-31")
day3 <- as.Date("2018-01-05")
day4 <- as.Date("2018-01-11")
day5 <- as.Date("2018-01-16")
# day1, day2, day3, day4 and day5 are already available in the workspace
# Difference between last and first pizza day
day5 - day1
# Create vector pizza
pizza <- c(day1, day2, day3, day4, day5)
# Create differences between consecutive pizza days: day_diff
day_diff <- diff(pizza)
# Average period between two consecutive pizza days
mean(day_diff)
login <- as.POSIXct("2018-01-02 10:18:04 UTC", "2018-01-07 09:14:18 UTC",
"2018-01-07 12:21:51 UTC", "2018-01-07 12:37:24 UTC",
"2018-01-09 21:37:55 UTC", format = "%Y-%m-%d %H:%M:%S")
login <- as.POSIXct("2018-01-02 10:18:04 UTC", "2018-01-07 09:14:18 UTC",
"2018-01-07 12:21:51 UTC", "2018-01-07 12:37:24 UTC",
"2018-01-09 21:37:55 UTC", format = "%Y-%m-%d %H:%M:%S", tz = "UTC")
login <- as.POSIXct("2018-01-02 10:18:04 UTC", "2018-01-07 09:14:18 UTC",
"2018-01-07 12:21:51 UTC", "2018-01-07 12:37:24 UTC",
"2018-01-09 21:37:55 UTC", format = "%Y-%m-%d %H:%M:%S", tz = "UTC")
login
login <- as.POSIXct(c("2018-01-02 10:18:04 UTC", "2018-01-07 09:14:18 UTC",
"2018-01-07 12:21:51 UTC", "2018-01-07 12:37:24 UTC",
"2018-01-09 21:37:55 UTC"), format = "%Y-%m-%d %H:%M:%S", tz = "UTC")
login
?diff
class(login)
login <- as.POSIXct(c("2018-01-02 10:18:04 UTC", "2018-01-07 09:14:18 UTC",
"2018-01-07 12:21:51 UTC", "2018-01-07 12:37:24 UTC",
"2018-01-09 21:37:55 UTC"), format = "%Y-%m-%d %H:%M:%S", tz = "UTC")
logout <- as.POSIXct(c("2018-01-02 10:18:04 UTC", "2018-01-07 09:14:18 UTC",
"2018-01-07 12:21:51 UTC", "2018-01-07 12:37:24 UTC",
"2018-01-09 21:37:55 UTC"), format = "%Y-%m-%d %H:%M:%S", tz = "UTC")
# login and logout are already defined in the workspace
# Calculate the difference between login and logout: time_online
time_online <- logout - login
print(time_online)
# Inspect the variable time_online
class(time_online)
# Calculate the total time online
sum(time_online)
# Calculate the average time online
mean(time_online)
login <- as.POSIXct(c("2018-01-02 10:18:04 UTC", "2018-01-07 09:14:18 UTC",
"2018-01-07 12:21:51 UTC", "2018-01-07 12:37:24 UTC",
"2018-01-09 21:37:55 UTC"), format = "%Y-%m-%d %H:%M:%S", tz = "UTC")
logout <- as.POSIXct(c("2018-01-02 10:56:29 UTC", "2018-01-07 09:14:52 UTC",
"2018-01-07 12:35:48 UTC", "2018-01-07 13:17:22 UTC",
"2018-01-09 22:08:47 UTC"), format = "%Y-%m-%d %H:%M:%S", tz = "UTC")
# login and logout are already defined in the workspace
# Calculate the difference between login and logout: time_online
time_online <- logout - login
print(time_online)
# Inspect the variable time_online
class(time_online)
# Calculate the total time online
sum(time_online)
# Calculate the average time online
mean(time_online)
astro <- c(spring = "20-Mar-2015", summer = "25-Jun-2015",
fall = "23-Sep-2015", winter = "22-Dec-2015")
astro
astro <- c(spring = "20-Mar-2015", summer = "25-Jun-2015",
fall = "23-Sep-2015", winter = "22-Dec-2015")
meteo <- c(spring = "March 1, 15", summer = "June 1, 15",
fall = "September 1, 15", winter = "December 1, 15")
# Convert astro to vector of Date objects: astro_dates
astro_dates <- as.Date(astro, format = "%d-%b-%Y")
# Convert meteo to vector of Date objects: meteo_dates
meteo_dates <- as.Date(meteo, format = "%B %d, %y")
# Calculate the maximum absolute difference between astro_dates and meteo_dates
max(abs(astro_dates - meteo_dates))
sample(x = 60:100, size = 199, replace = TRUE)
matrix(sample(x = 60:100, size = 800, replace = TRUE),
ncol = 4)
me         <- 89
other_199  <- sample(x = 60:100, size = 199, replace = TRUE)
previous_4 <- matrix(sample(x = 60:100, size = 800, replace = TRUE),
ncol = 4)
# me, other_199, and previous_4 are available in your workspace
# Merge me and other_199: my_class
my_class <- c(me, other_199)
# cbind() my_class and previous_4: last_5
last_5 <- cbind(my_class, previous_4)
# Name last_5 appropriately
nms <- paste0("year_", 1:5)
colnames(last_5) <- nms
# me, my_class and last_5 are available in your workspace
# Build histogram of my_class
hist(my_class)
# Generate summary of last_5
summary(last_5)
# Build boxplot of last_5
boxplot(last_5)
# me, my_class and last_5 are preloaded
# Is your grade equal to 72?
me == 72
# Which grades in your class are higher than 75?
my_class > 75
# Which grades in the last 5 years are below or equal to 64?
last_5 <= 64
# me, my_class and last_5 are preloaded
# How many grades in your class are higher than 75?
sum(my_class > 75)
# How many students in your class scored strictly higher than you?
sum(my_class > me)
# What's the proportion of grades below or equal to 64 in the last 5 years?
sum(last_5 <= 64) / length(last_5)
# me, my_class and last_5 are preloaded
# Is your grade greater than 87 and smaller than or equal to 89?
me > 87 & me <= 89
# Which grades in your class are below 60 or above 90?
my_class < 60 | my_class > 90
# me, my_class and last_5 are preloaded
# What's the proportion of grades in your class that is average?
sum(my_class >= 70 & my_class <= 85) / length(my_class)
# How many students in the last 5 years had a grade of 80 or 90?
sum(last_5 == 80 | last_5 == 90)
# me, my_class and last_5 are preloaded
# Define n_smart
n_smart <- sum(my_class >= 80)
# Code the if-else construct
if (n_smart > 50){
print("smart class")
} else {
print("rather average")
}
# me, my_class and last_5 are preloaded
# Define prop_less
prop_less <- sum(my_class < me) / length(my_class)
# Code the control construct
if (prop_less > 0.9) {
print("you're among the best 10 percent")
} else if (prop_less > 0.8){
print("you're among the best 20 percent")
} else {
print("need more analysis")
}
# me, my_class and last_5 are preloaded
# Embedded control structure: fix the error
if (mean(my_class) < 75) {
if (mean(my_class) > me) {
print("average year, but still smarter than me")
} else {
print("average year, but I'm not that bad")
}
} else {
if (mean(my_class) > me) {
print("smart year, even smarter than me")
} else {
print("smart year, but I am smarter")
}
}
# me, my_class and last_5 are preloaded
# Create top_grades
top_grades <- my_class[my_class >= 85]
# Create worst_grades
worst_grades <- my_class[my_class < 65]
# Write conditional statement
if (length(top_grades) > length(worst_grades)) {
print("top grades prevail")
}
timestampts <- c(as.Date("2015-09-15 08:00:53 UTC", "2015-09-15 18:07:58 UTC",
"2015-09-15 21:14:16 UTC", "2015-09-17 01:31:51 UTC",
"2015-09-17 13:33:43 UTC", "2015-09-17 15:34:22 UTC",
"2015-09-18 03:37:18 UTC"))
# logs is available in your workspace
# Call max() on timestamps
max(timestamps)
timestamps <- c(as.Date("2015-09-15 08:00:53 UTC", "2015-09-15 18:07:58 UTC",
"2015-09-15 21:14:16 UTC", "2015-09-17 01:31:51 UTC",
"2015-09-17 13:33:43 UTC", "2015-09-17 15:34:22 UTC",
"2015-09-18 03:37:18 UTC"))
# logs is available in your workspace
# Call max() on timestamps
max(timestamps)
# What is the date of the latest timestamp?
max(as.Date(timestamps))
timestamps
timestamps <- c(as.Date("2015-09-15 08:00:53 UTC", "2015-09-15 18:07:58 UTC",
"2015-09-15 21:14:16 UTC", "2015-09-17 01:31:51 UTC",
"2015-09-17 13:33:43 UTC", "2015-09-17 15:34:22 UTC",
"2015-09-18 03:37:18 UTC"))
timestamps
timestamps <- as.Date(c("2015-09-15 08:00:53 UTC", "2015-09-15 18:07:58 UTC",
"2015-09-15 21:14:16 UTC", "2015-09-17 01:31:51 UTC",
"2015-09-17 13:33:43 UTC", "2015-09-17 15:34:22 UTC",
"2015-09-18 03:37:18 UTC"))
# logs is available in your workspace
# Call max() on timestamps
max(timestamps)
# What is the date of the latest timestamp?
max(as.Date(timestamps))
timestamps <- as.Date(c("2015-09-15 08:00:53 UTC", "2015-09-15 18:07:58 UTC",
"2015-09-15 21:14:16 UTC", "2015-09-17 01:31:51 UTC",
NA, "2015-09-17 15:34:22 UTC",
"2015-09-18 03:37:18 UTC"))
# A faulty version of timestamps is available in your workspace
# Print out timestamps
timestamps
# Call max() on timestamps, no additional arguments
max(timestamps)
# Call max() on timestamps, specify na.rm
max(timestamps, na.rm = TRUE)
timestamps <- c("2015-09-15 08:00:53 UTC", "2015-09-15 18:07:58 UTC",
"2015-09-15 21:14:16 UTC", "2015-09-17 01:31:51 UTC",
NA, "2015-09-17 15:34:22 UTC",
"2015-09-18 03:37:18 UTC")
# A faulty version of timestamps is available in your workspace
# Print out timestamps
timestamps
# Call max() on timestamps, no additional arguments
max(timestamps)
# Call max() on timestamps, specify na.rm
max(timestamps, na.rm = TRUE)
Titanic
# Import titanic from csv
# titanic <- read.csv("titanic.csv")
titanic <- Titanic
# Call dim on titanic
dim(titanic)
# Generate histogram of Age column
hist(titanic$Age)
??Titanic
Titanic
?vapply
